"""
Задание 6. На закрепление навыков работы с очередью
Примечание: в этом задании вспомните ваши знания по работе с ООП
и опирайтесь на пример урока
Реализуйте класс-структуру "доска задач".
Структура должна предусматривать наличие несольких очередей задач, например
1) базовой, откуда задачи берутся, решаются и отправляются в список решенных
2) очередь на доработку, когда нерешенные задачи из первой очереди отправляются
на корректировку решения
3) список решенных задач, куда задачи перемещаются из базовой очереди или
очереди на доработку
После реализации структуры, проверьте ее работу на различных сценариях
Примечание: ПРОШУ ВАС ВНИМАТЕЛЬНО ЧИТАТЬ ЗАДАНИЕ!
"""

class QueueClass:
    def __init__(self):
        self.elems = []

    def is_empty(self):
        return self.elems == []

    def to_queue(self, item):
        self.elems.insert(0, item)

    def from_queue(self):
        return self.elems.pop()

    def size(self):
        return len(self.elems)

    def remove(self, other, item):
        other.elems.insert(0, item.from_queue())
        self.elems.pop()


if __name__ == '__main__':
    basic_tasks = QueueClass()
    rev_tasks = QueueClass()
    print(basic_tasks.is_empty())  # -> True. Основная очередь пустая

    # помещаем объекты в основную очередь
    basic_tasks.to_queue('first')
    basic_tasks.to_queue('second')
    basic_tasks.to_queue('third')

    print(basic_tasks.is_empty())  # -> False. Основная очередь не пустая

    print(rev_tasks.is_empty())  # -> True. Очередь для доработки пустая

    print(basic_tasks.size())  # -> 3

    # Переносим задачу в список задач на доработку
    basic_tasks.remove(rev_tasks, basic_tasks)

    print(basic_tasks.size())  # -> 2

    print(rev_tasks.size())  # -> 1

    print(basic_tasks.from_queue())  # -> second

    print(basic_tasks.size())  # -> 1

    print(rev_tasks.from_queue())  # -> first

    print(rev_tasks.size())  # -> 0


    """
Задание 7. На закрепление навыков работы с деком
В рассмотренном на уроке листинге есть один недостаток
Приведенный код способен "обработать" только строку без пробелов,
например, 'топот'
Но могут быть и такие палиндромы, как 'молоко делили ледоколом'
Вам нужно доработать программу так, чтобы она могла выполнить
проверку на палиндром и в таких строках (включающих пробелы)
Примечание: ПРОШУ ВАС ВНИМАТЕЛЬНО ЧИТАТЬ ЗАДАНИЕ!
--код с нуля писать не нужно, требуется доработать пример с урока
"""



class DequeClass:
    def __init__(self):
        self.elems = []

    def is_empty(self):
        return self.elems == []

    def add_to_front(self, elem):
        self.elems.append(elem)

    def add_to_rear(self, elem):
        self.elems.insert(0, elem)

    def remove_from_front(self):
        return self.elems.pop()

    def remove_from_rear(self):
        return self.elems.pop(0)

    def size(self):
        return len(self.elems)


def pal_checker(string):
    dc_obj = DequeClass()
    s = string.replace(' ', '')

    for el in s:
        dc_obj.add_to_rear(el)

    still_equal = True

    while dc_obj.size() > 1 and still_equal:
        first = dc_obj.remove_from_front()
        last = dc_obj.remove_from_rear()
        if first != last:
            still_equal = False

    return still_equal


print(pal_checker("молоко делили ледоколом"))