"""
Задание 1.	Написать программу, которая будет складывать, вычитать,
умножать или делить два числа. Числа и знак операции вводятся пользователем.
После выполнения вычисления программа не должна завершаться, а должна
запрашивать новые данные для вычислений. Завершение программы должно
выполняться при вводе символа '0' в качестве знака операции. Если пользователь
вводит неверный знак (не '0', '+', '-', '*', '/'), то программа должна
сообщать ему об ошибке и снова запрашивать знак операции.
Также сообщать пользователю о невозможности деления на ноль,
если он ввел 0 в качестве делителя.
Подсказка:
Вариант исполнения:
- условие рекурсивного вызова - введена операция +, -, *, / - ШАГ РЕКУРСИИ
- условие завершения рекурсии - введена операция 0 - БАЗОВЫЙ СЛУЧАЙ
Решите через рекурсию. В задании нельзя применять циклы.
Пример:
Введите операцию (+, -, *, / или 0 для выхода): +
Введите первое число: 214
Введите второе число: 234
Ваш результат 448
Введите операцию (+, -, *, / или 0 для выхода): -
Введите первое число: вп
Вы вместо трехзначного числа ввели строку (((. Исправьтесь
Введите операцию (+, -, *, / или 0 для выхода):
"""

def calc():
    operation = input("Введите операцию (+, -, *, / или 0 для выхода): ")

    if operation == '0':
        return "Конец вычислений"

    else:
        if operation in "+-*/":
            try:
                num_1 = int(input("Введите первое число: "))
                num_2 = int(input("Введите второе число: "))

                if operation == '+':
                    print(f"Ваш результат {num_1 + num_2}")
                    return calc()

                elif operation == '-':
                    print(f"Ваш результат {num_1 - num_2}")
                    return calc()

                elif operation == '*':
                    print(f"Ваш результат {num_1 * num_2}")
                    return calc()

                elif operation == '/':
                    if num_2 != 0:
                        print(f"Ваш результат {num_1 / num_2}")
                    else:
                        print('Деление на ноль запрещено (((')
                    return calc()

            except ValueError:
                print("Вы вместо числа ввели строку. Попробуйте еще раз")
                return calc()

        else:
            print("Введен неверный символ, попробуйте еще раз")
            return calc()


calc()


"""
Задание 2.	Подсчитать четные и нечетные цифры введенного натурального числа.
Например, если введено число 34560, то у него 3 четные цифры
(4, 6 и 0) и 2 нечетные (3 и 5).
Подсказка:
На каждом шаге вам нужно 'доставать' из числа очередную цифру
и смотреть является ли она четной или нечетной.
При этом увеличиваем соответствующий счетчик
Пока все числа не извлечены, рекурсивные вызовы продолжаем
Условие завершения рекурсии - все числа извлечены
Используем операции % //. Операции взятия по индексу применять нельзя.
Решите через рекурсию. В задании нельзя применять циклы.
Пример:
Введите число: 123
Количество четных и нечетных цифр в числе равно: (1, 2)
"""

def digits(num, even=0, odd=0):
    if num == 0:
        return even, odd
    else:
        digit = num % 10
        num = num // 10
        if digit % 2 == 0:
            even += 1
        else:
            odd += 1
        return digits(num, even, odd)


try:
    numb = int(input('Введите натуральное число: '))
    print(f"Количество четных и нечетных цифр в числе равно: {digits(numb)}")
except ValueError:
    print("Вы вместо числа ввели строку. Попробуйте еще раз")


"""
Задание 3.	Сформировать из введенного числа
обратное по порядку входящих в него
цифр и вывести на экран. Например, если введено число 3486,
то надо вывести число 6843.
Подсказка:
На каждом шаге вам нужно 'доставать' из числа очередную цифру
Пока все числа не извлечены рекурсивные вызовы продолжаем
Условие завершения рекурсии - все цифры извлечены
Используем операции % //. Операции взятия по индексу применять нельзя.
Решите через рекурсию. В задании нельзя применять циклы.
Пример:
Введите число, которое требуется перевернуть: 123
Перевернутое число: 321
Не забудьте проверить на числе, которое оканчивается на 0.
1230 -> 0321
"""


def reverse_num(number):
    if number // 10 == 0:
        return str(number)
    else:
        return str(number % 10) + str(reverse_num(number // 10))

try:
    number = int(input('Введите число: '))
    print(f'Перевернутое число: {reverse_num(number)}')
except ValueError:
    print("Вы вместо числа ввели строку")


"""
Задание 4.	Найти сумму n элементов следующего ряда чисел:
1 -0.5 0.25 -0.125 ...
Количество элементов (n) вводится с клавиатуры.
Пример:
Введите количество элементов: 3
Количество элементов - 3, их сумма - 0.75
Решите через рекурсию. В задании нельзя применять циклы.
Нужно обойтисть без создания массива!
"""

def numb_summ(n, result, numb = 1.0):
    if n == 0:
        print(f'Сумма элементов: {result}')
    else:
        result = result + numb
        numb = numb / 2 * -1
        return numb_summ(n - 1, result, numb)

user_input = int(input('Введите количество элементов: '))
numb_summ(user_input, 0)


"""
Задание 5.	Вывести на экран коды и символы таблицы ASCII, начиная с символа
под номером 32 и заканчивая 127-м включительно.
Вывод выполнить в табличной форме: по десять пар "код-символ" в каждой строке.
Пример:
32 -   33 - ! 34 - " 35 - # 36 - $ 37 - % 38 - & 39 - ' 40 - ( 41 - )
42 - * 43 - + 44 - , 45 - - 46 - . 47 - / 48 - 0 49 - 1 50 - 2 51 - 3
52 - 4 53 - 5 54 - 6 55 - 7 56 - 8 57 - 9 58 - : 59 - ; 60 - < 61 - =
62 - > 63 - ? 64 - @ 65 - A 66 - B 67 - C 68 - D 69 - E 70 - F 71 - G
72 - H 73 - I 74 - J 75 - K 76 - L 77 - M 78 - N 79 - O 80 - P 81 - Q
82 - R 83 - S 84 - T 85 - U 86 - V 87 - W 88 - X 89 - Y 90 - Z 91 - [
92 - \ 93 - ] 94 - ^ 95 - _ 96 - ` 97 - a 98 - b 99 - c 100 - d 101 - e
102 - f 103 - g 104 - h 105 - i 106 - j 107 - k 108 - l 109 - m 110 - n 111 - o
112 - p 113 - q 114 - r 115 - s 116 - t 117 - u 118 - v 119 - w 120 - x 121 - y
122 - z 123 - { 124 - | 125 - } 126 - ~ 127 - 
Решите через рекурсию. В задании нельзя применять циклы.
Допускается исп-е встроенных ф-ций
"""

def show_ascii(through, to, count=0):
    count += 1
    if through > to:
        return
    end = '    '
    if count == 10:
        end = '\n'
        count = 0
    print(f'{through} - {chr(through)}', end=end)
    return show_ascii(through + 1, to, count)


print(show_ascii(32, 127))


"""
Задание 6.	В программе генерируется случайное целое число от 0 до 100.
Пользователь должен его отгадать не более чем за 10 попыток. После каждой
неудачной попытки должно сообщаться больше или меньше введенное пользователем
число, чем то, что загадано. Если за 10 попыток число не отгадано,
то вывести загаданное число.
Решите через рекурсию. В задании нельзя применять циклы.
"""

from random import randrange


def num_guess(count, num):
    if count == 0:
        print("Попытки закончились. Вы проиграли! Загаданное число -", num)
        return
    guess = int(input("Введите число от 0 до 100: "))
    if num == guess:
        print(f"Вы угадали! Я загадал именно {num}! ")
        return
    result = 'больше' if guess > num else 'меньше'
    print(f"Вы не угадали! Ваше число {result} загаданного! Осталось {count - 1} попыток!")
    num_guess(count - 1, num)


num_guess(10, randrange(100))



"""
Задание 7.	Напишите программу, доказывающую или проверяющую, что для множества
натуральных чисел выполняется равенство: 1+2+...+n = n(n+1)/2,
где n - любое натуральное число.
Пример:
для n = 5
1+2+3+4+5 = 5(5+1)/2
Нужно написать рекурсивную ф-цию только для левой части выражения!
Результат нужно сверить с правой частью.
Правой части выражения в рекурсивной ф-ции быть не должно!
Решите через рекурсию. В задании нельзя применять циклы.
"""


def natural_summ(n, summ=0):
    if n == 1:
        return summ + n
    else:
        summ = summ + n
        return natural_summ(n-1, summ)


n = int(input('Введите натуральное число: '))
print(f'{natural_summ(n)} = {int(n*(n+1)/2)}')